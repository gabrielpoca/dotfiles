/// <reference types="node" />
/**
 * Handles attaching transport
 */
import { Transport } from '../utils/transport';
import { Neovim } from './Neovim';
import { Buffer } from './Buffer';
import { ILogger } from '../utils/logger';
export declare const DETACH_BUFFER: unique symbol;
export declare const ATTACH_BUFFER: unique symbol;
export declare type Callback = (err?: Error | null, res?: any) => void;
export declare class AsyncResponse {
    readonly requestId: number;
    private cb;
    private finished;
    constructor(requestId: number, cb: Callback);
    finish(err?: string | null, res?: any): void;
}
export declare class NeovimClient extends Neovim {
    protected requestQueue: any[];
    private _isReady;
    private requestId;
    private transportAttached;
    private responses;
    private _channelId;
    private attachedBuffers;
    private functions;
    private pauseLevel;
    private pauseTimer;
    constructor(options: {
        transport?: Transport;
        logger: ILogger;
    });
    createBuffer(id: number): Buffer;
    /** Attaches msgpack to read/write streams * */
    attach({ reader, writer, }: {
        reader: NodeJS.ReadableStream;
        writer: NodeJS.WritableStream;
    }, requestApi?: boolean): void;
    detach(): void;
    readonly isApiReady: boolean;
    readonly channelId: Promise<number>;
    isAttached(bufnr: number): boolean;
    private handleRequest;
    sendAsyncRequest(method: string, args: any[]): Promise<any>;
    private emitNotification;
    private handleNotification;
    private setupTransport;
    requestApi(): Promise<any[]>;
    generateApi(): Promise<null | boolean>;
    [ATTACH_BUFFER](buffer: Buffer): void;
    [DETACH_BUFFER](buffer: Buffer): void;
    attachBufferEvent(buffer: Buffer, eventName: string, cb: Function): void;
    /**
     * Returns `true` if buffer should be detached
     */
    detachBufferEvent(buffer: Buffer, eventName: string, cb: Function): void;
    pauseNotification(): void;
    resumeNotification(cancel?: boolean, notify?: boolean): Promise<void>;
    hasFunction(name: string): boolean;
}
