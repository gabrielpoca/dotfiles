"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Handles attaching transport
 */
const transport_1 = require("../utils/transport");
const Neovim_1 = require("./Neovim");
const Buffer_1 = require("./Buffer");
exports.DETACH_BUFFER = Symbol('detachBuffer');
exports.ATTACH_BUFFER = Symbol('attachBuffer');
class AsyncResponse {
    constructor(requestId, cb) {
        this.requestId = requestId;
        this.cb = cb;
        this.finished = false;
    }
    finish(err, res) {
        if (this.finished)
            return;
        this.finished = true;
        if (err) {
            this.cb(new Error(err));
            return;
        }
        this.cb(null, res);
    }
}
exports.AsyncResponse = AsyncResponse;
class NeovimClient extends Neovim_1.Neovim {
    constructor(options) {
        // Neovim has no `data` or `metadata`
        super({
            logger: options.logger
        });
        this.requestId = 1;
        this.responses = new Map();
        this.attachedBuffers = new Map();
        this.pauseLevel = 0;
        Object.defineProperty(this, 'client', {
            value: this
        });
        const transport = options.transport || new transport_1.Transport();
        this.setTransport(transport);
        this.requestQueue = [];
        this.transportAttached = false;
        this.handleRequest = this.handleRequest.bind(this);
        this.handleNotification = this.handleNotification.bind(this);
    }
    createBuffer(id) {
        return new Buffer_1.Buffer({
            transport: this.transport,
            data: id,
            client: this
        });
    }
    /** Attaches msgpack to read/write streams * */
    attach({ reader, writer, }, requestApi = true) {
        this.transport.attach(writer, reader, this);
        this.transportAttached = true;
        this.setupTransport(requestApi);
    }
    /* called when attach process disconnected*/
    detach() {
        this.transport.detach();
        this.transportAttached = false;
    }
    get isApiReady() {
        return this.transportAttached && typeof this._channelId !== 'undefined';
    }
    get channelId() {
        return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
            yield this._isReady;
            resolve(this._channelId);
        }));
    }
    isAttached(bufnr) {
        return this.attachedBuffers.has(bufnr);
    }
    handleRequest(method, args, resp, ...restArgs) {
        // If neovim API is not generated yet and we are not handle a 'specs' request
        // then queue up requests
        //
        // Otherwise emit as normal
        if (!this.isApiReady && method !== 'specs') {
            this.requestQueue.push({
                type: 'request',
                args: [method, args, resp, ...restArgs],
            });
        }
        else {
            this.emit('request', method, args, resp);
        }
    }
    sendAsyncRequest(method, args) {
        let id = this.requestId;
        this.requestId = id + 1;
        this.notify('nvim_call_function', ['coc#rpc#async_request', [id, method, args || []]]);
        return new Promise((resolve, reject) => {
            let response = new AsyncResponse(id, (err, res) => {
                if (err)
                    return reject(err);
                resolve(res);
            });
            this.responses.set(id, response);
        });
    }
    emitNotification(method, args) {
        if (method.endsWith('_event')) {
            if (method.startsWith('nvim_buf_')) {
                const shortName = method.replace(/nvim_buf_(.*)_event/, '$1');
                const buffer = args[0];
                const { id } = buffer;
                if (!this.isAttached(id)) {
                    // this is a problem
                    return;
                }
                const bufferMap = this.attachedBuffers.get(id);
                const cbs = bufferMap.get(shortName) || [];
                cbs.forEach(cb => cb(...args));
                // Handle `nvim_buf_detach_event`
                // clean `attachedBuffers` since it will no longer be attached
                if (shortName === 'detach') {
                    this.attachedBuffers.delete(id);
                }
                return;
            }
            // async_request_event from vim
            if (method.startsWith('nvim_async_request')) {
                const [id, method, arr] = args;
                this.handleRequest(method, arr, {
                    send: (resp, isError) => {
                        this.notify('nvim_call_function', ['coc#rpc#async_response', [id, resp, isError]]);
                    }
                });
            }
            // nvim_async_response_event
            if (method.startsWith('nvim_async_response')) {
                const [id, err, res] = args;
                const response = this.responses.get(id);
                if (!response) {
                    this.logger.error(`Response not found for request ${id}`);
                    return;
                }
                this.responses.delete(id);
                response.finish(err, res);
                return;
            }
            this.logger.error(`Unhandled event: ${method}`);
        }
        else {
            this.emit('notification', method, args);
        }
    }
    handleNotification(method, args, ...restArgs) {
        // If neovim API is not generated yet then queue up requests
        //
        // Otherwise emit as normal
        if (!this.isApiReady) {
            this.requestQueue.push({
                type: 'notification',
                args: [method, args, ...restArgs],
            });
        }
        else {
            this.emitNotification(method, args);
        }
    }
    // Listen and setup handlers for transport
    setupTransport(requestApi = true) {
        if (!this.transportAttached) {
            throw new Error('Not attached to input/output');
        }
        this.transport.on('request', this.handleRequest);
        this.transport.on('notification', this.handleNotification);
        this.transport.on('detach', () => {
            this.emit('disconnect');
            this.transport.removeAllListeners('request');
            this.transport.removeAllListeners('notification');
            this.transport.removeAllListeners('detach');
        });
        if (requestApi) {
            this._isReady = this.generateApi();
        }
        else {
            this._channelId = 0;
            this._isReady = Promise.resolve(true);
        }
    }
    requestApi() {
        return new Promise((resolve, reject) => {
            this.transport.request('nvim_get_api_info', [], (err, res) => {
                if (err) {
                    reject(new Error(Array.isArray(err) ? err[1] : err.message || err.toString()));
                }
                else {
                    resolve(res);
                }
            });
        });
    }
    generateApi() {
        return __awaiter(this, void 0, void 0, function* () {
            let results;
            try {
                results = yield this.requestApi();
            }
            catch (err) {
                this.logger.error('Could not get vim api results');
                this.logger.error(err);
            }
            if (results) {
                try {
                    const [channelId, metadata] = results;
                    this.functions = metadata.functions.map(f => f.name);
                    this._channelId = channelId;
                    // register the non-queueing handlers
                    // dequeue any pending RPCs
                    this.requestQueue.forEach(pending => {
                        if (pending.type === 'notification') {
                            this.emitNotification(pending.args[0], pending.args[1]);
                        }
                        else {
                            this.emit(pending.type, ...pending.args);
                        }
                    });
                    this.requestQueue = [];
                    return true;
                }
                catch (err) {
                    this.logger.error(err.stack);
                    return null;
                }
            }
            return null;
        });
    }
    [exports.ATTACH_BUFFER](buffer) {
        this.attachedBuffers.set(buffer.id, new Map());
    }
    [exports.DETACH_BUFFER](buffer) {
        this.attachedBuffers.delete(buffer.id);
    }
    attachBufferEvent(buffer, eventName, cb) {
        if (!this.isAttached(buffer.id))
            return;
        const bufferMap = this.attachedBuffers.get(buffer.id);
        if (!bufferMap.get(eventName)) {
            bufferMap.set(eventName, []);
        }
        const cbs = bufferMap.get(eventName);
        if (cbs.indexOf(cb) !== -1)
            return;
        cbs.push(cb);
        bufferMap.set(eventName, cbs);
        this.attachedBuffers.set(buffer.id, bufferMap);
        return;
    }
    /**
     * Returns `true` if buffer should be detached
     */
    detachBufferEvent(buffer, eventName, cb) {
        const bufferMap = this.attachedBuffers.get(buffer.id);
        if (!bufferMap)
            return;
        const handlers = (bufferMap.get(eventName) || []).filter(handler => handler !== cb);
        // Remove eventName listener from bufferMap if no more handlers
        if (!handlers.length) {
            bufferMap.delete(eventName);
        }
        else {
            bufferMap.set(eventName, handlers);
        }
    }
    pauseNotification() {
        this.pauseLevel = this.pauseLevel + 1;
        this.transport.pauseNotification();
        if (this.pauseTimer)
            clearTimeout(this.pauseTimer);
        this.pauseTimer = setTimeout(() => {
            this.pauseLevel = 0;
            // tslint:disable-next-line: no-floating-promises
            this.transport.resumeNotification();
        }, 50);
    }
    resumeNotification(cancel, notify) {
        if (this.pauseLevel == 0)
            return Promise.resolve();
        this.pauseLevel = this.pauseLevel - 1;
        if (cancel)
            return Promise.resolve();
        if (this.pauseLevel == 0) {
            if (this.pauseTimer)
                clearTimeout(this.pauseTimer);
            if (!notify)
                return this.transport.resumeNotification();
            this.transport.resumeNotification(true);
        }
        return Promise.resolve();
    }
    hasFunction(name) {
        return this.functions.indexOf(name) !== -1;
    }
}
exports.NeovimClient = NeovimClient;
