"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const log4js_1 = __importDefault(require("log4js"));
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const MAX_LOG_SIZE = 1024 * 1024;
const MAX_LOG_BACKUPS = 10;
const LOG_FILE_PATH = process.env.NVIM_COC_LOG_FILE || path_1.default.join(os_1.default.tmpdir(), 'coc-nvim.log');
const level = process.env.NVIM_COC_LOG_LEVEL || 'info';
if (!fs_1.default.existsSync(LOG_FILE_PATH)) {
    fs_1.default.writeFileSync(LOG_FILE_PATH, '', { encoding: 'utf8', mode: 0o666 });
    fs_1.default.chmodSync(LOG_FILE_PATH, 0o666);
}
const isRoot = process.getuid && process.getuid() == 0;
if (!isRoot) {
    log4js_1.default.configure({
        disableClustering: true,
        appenders: {
            out: {
                type: 'file',
                mode: 0o666,
                filename: LOG_FILE_PATH,
                maxLogSize: MAX_LOG_SIZE,
                backups: MAX_LOG_BACKUPS,
                layout: {
                    type: 'pattern',
                    // Format log in following pattern:
                    // yyyy-MM-dd HH:mm:ss.mil $Level (pid:$pid) $categroy - $message.
                    pattern: `%d{ISO8601} %p (pid:${process.pid}) [%c] - %m`,
                },
            }
        },
        categories: {
            default: { appenders: ['out'], level }
        }
    });
}
module.exports = (name = 'coc-nvim') => {
    return log4js_1.default.getLogger(name);
};
//# sourceMappingURL=logger.js.map