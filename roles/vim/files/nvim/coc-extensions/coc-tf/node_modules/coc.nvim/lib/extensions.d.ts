import { Event } from 'vscode-languageserver-protocol';
import { Extension, ExtensionInfo, ExtensionState } from './types';
export declare type API = {
    [index: string]: any;
} | void | null | undefined;
export interface ExtensionItem {
    id: string;
    extension: Extension<API>;
    deactivate: () => void;
    directory?: string;
}
export declare class Extensions {
    private list;
    private interval;
    private db;
    private _onReady;
    private _onDidLoadExtension;
    private _onDidActiveExtension;
    private _onDidUnloadExtension;
    private _ready;
    readonly onReady: Event<void>;
    readonly onDidLoadExtension: Event<Extension<API>>;
    readonly onDidActiveExtension: Event<Extension<API>>;
    readonly onDidUnloadExtension: Event<string>;
    readonly root: string;
    init(): Promise<void>;
    readonly ready: Promise<void>;
    private updateExtensions;
    updateNodeRpc(): Promise<void>;
    addExtensions(): Promise<void>;
    installExtensions(): Promise<void>;
    readonly all: Extension<API>[];
    readonly commands: {
        [index: string]: string;
    };
    getExtensionState(id: string): ExtensionState;
    getExtensionStates(): ExtensionInfo[];
    toggleExtension(id: string): Promise<void>;
    reloadExtension(id: string): Promise<void>;
    uninstallExtension(ids: string[]): Promise<void>;
    isDisabled(id: string): boolean;
    onExtensionInstall(id: string): Promise<void>;
    has(id: string): boolean;
    isActivted(id: string): boolean;
    loadExtension(folder: string): Promise<void>;
    private loadJson;
    private packageNameFromUrl;
    private setupActiveEvents;
    activate(id: any, silent?: boolean): void;
    deactivate(id: any): boolean;
    getConfigurations(): {
        [index: string]: any;
    };
    call(id: string, method: string, args: any[]): Promise<any>;
    private createExtension;
    getExtensionApi(id: string): API | null;
    registerExtension(extension: Extension<API>, deactivate?: () => void): void;
    private globalExtensionStats;
    private localExtensionStats;
    private isGlobalExtension;
    readonly globalExtensions: string[];
}
declare const _default: Extensions;
export default _default;
