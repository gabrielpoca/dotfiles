import { Neovim } from '@chemzqm/neovim';
import Document from '../model/document';
import { CompleteConfig, CompleteOption, CompleteResult, ISource, RecentScore, VimCompleteItem } from '../types';
export declare type Callback = () => void;
export default class Complete {
    option: CompleteOption;
    private document;
    private config;
    private nvim;
    results: CompleteResult[] | null;
    readonly recentScores: RecentScore;
    private _canceled;
    private sources;
    private localBonus;
    private tokenSources;
    constructor(option: CompleteOption, document: Document, recentScores: RecentScore | null, config: CompleteConfig, nvim: Neovim);
    readonly isCanceled: boolean;
    readonly startcol: number;
    readonly input: string;
    readonly isIncomplete: boolean;
    private completeSource;
    completeInComplete(resumeInput: string): Promise<VimCompleteItem[]>;
    filterResults(input: string, cid?: number): VimCompleteItem[];
    hasMatch(input: string): boolean;
    doComplete(sources: ISource[]): Promise<VimCompleteItem[]>;
    resolveCompletionItem(item: VimCompleteItem): VimCompleteItem | null;
    private getFollowPart;
    cancel(): void;
}
