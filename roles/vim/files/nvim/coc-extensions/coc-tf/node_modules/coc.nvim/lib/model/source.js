"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../types");
const fuzzy_1 = require("../util/fuzzy");
const string_1 = require("../util/string");
const workspace_1 = __importDefault(require("../workspace"));
const logger = require('../util/logger')('model-source');
class Source {
    constructor(option) {
        this._disabled = false;
        let { name, optionalFns } = option;
        this.name = name;
        this.nvim = workspace_1.default.nvim;
        this.isSnippet = !!option.isSnippet;
        this.optionalFns = optionalFns || [];
        this.filepath = option.filepath || '';
        this.sourceType = option.sourceType || types_1.SourceType.Native;
        this.triggerCharacters = option.triggerCharacters || this.getConfig('triggerCharacters', []);
    }
    get priority() {
        return this.getConfig('priority', 1);
    }
    get triggerPatterns() {
        let patterns = this.getConfig('triggerPatterns', null);
        if (!patterns || patterns.length == 0)
            return null;
        return patterns.map(s => new RegExp(s + '$'));
    }
    get shortcut() {
        let shortcut = this.getConfig('shortcut', null);
        return shortcut ? shortcut : this.name.slice(0, 3);
    }
    get enable() {
        if (this._disabled)
            return false;
        return this.getConfig('enable', true);
    }
    get filetypes() {
        return this.getConfig('filetypes', null);
    }
    get disableSyntaxes() {
        return this.getConfig('disableSyntaxes', []);
    }
    getConfig(key, defaultValue) {
        let config = workspace_1.default.getConfiguration(`coc.source.${this.name}`);
        return config.get(key, defaultValue);
    }
    toggle() {
        this._disabled = !this._disabled;
    }
    get firstMatch() {
        return this.getConfig('firstMatch', true);
    }
    get menu() {
        let { shortcut } = this;
        return `[${shortcut.toUpperCase()}]`;
    }
    filterWords(words, opt) {
        let res = [];
        let { input } = opt;
        let cword = opt.word;
        if (!input.length)
            return [];
        let cFirst = input[0];
        for (let word of words) {
            if (!word || word.length < 3)
                continue;
            if (cFirst && !fuzzy_1.fuzzyChar(cFirst, word[0]))
                continue;
            if (word == cword || word == input)
                continue;
            res.push(word);
        }
        return res;
    }
    /**
     * fix start column for new valid characters
     *
     * @protected
     * @param {CompleteOption} opt
     * @param {string[]} valids - valid charscters
     * @returns {number}
     */
    fixStartcol(opt, valids) {
        let { col, input, line, bufnr } = opt;
        let start = string_1.byteSlice(line, 0, col);
        let document = workspace_1.default.getDocument(bufnr);
        if (!document)
            return col;
        let { chars } = document;
        for (let i = start.length - 1; i >= 0; i--) {
            let c = start[i];
            if (!chars.isKeywordChar(c) && valids.indexOf(c) === -1) {
                break;
            }
            input = `${c}${input}`;
            col = col - 1;
        }
        opt.col = col;
        opt.input = input;
        return col;
    }
    async refresh() {
        // do nothing
    }
    async shouldComplete(opt) {
        let { disableSyntaxes } = this;
        let synname = opt.synname.toLowerCase();
        if (disableSyntaxes && disableSyntaxes.length && disableSyntaxes.findIndex(s => synname.indexOf(s.toLowerCase()) != -1) !== -1) {
            return false;
        }
        return true;
    }
    async onCompleteDone(_item, _opt) {
        // do nothing
    }
    async doComplete(_opt) {
        return null;
    }
}
exports.default = Source;
//# sourceMappingURL=source.js.map