import { NeovimClient as Neovim } from '@chemzqm/neovim';
import { CodeAction, Definition, DocumentLink, Range, SymbolInformation, CodeActionKind, LocationLink } from 'vscode-languageserver-protocol';
interface SymbolInfo {
    filepath?: string;
    lnum: number;
    col: number;
    text: string;
    kind: string;
    level?: number;
    containerName?: string;
    selectionRange: Range;
    range?: Range;
}
interface CommandItem {
    id: string;
    title: string;
}
export default class Handler {
    private nvim;
    private preferences;
    private highlightsMap;
    private highlightNamespace;
    private colors;
    private hoverFactory;
    private signatureFactory;
    private documentLines;
    private currentSymbols;
    private codeLensManager;
    private cursorMoveTs;
    private signatureTokenSource;
    private disposables;
    constructor(nvim: Neovim);
    onHover(): Promise<void>;
    gotoDefinition(openCommand?: string): Promise<void>;
    gotoDeclaration(openCommand?: string): Promise<void>;
    gotoTypeDefinition(openCommand?: string): Promise<void>;
    gotoImplementation(openCommand?: string): Promise<void>;
    gotoReferences(openCommand?: string): Promise<void>;
    getDocumentSymbols(): Promise<SymbolInfo[]>;
    getWorkspaceSymbols(): Promise<SymbolInfo[]>;
    resolveWorkspaceSymbol(symbolIndex: number): Promise<SymbolInformation>;
    rename(): Promise<void>;
    documentFormatting(): Promise<void>;
    documentRangeFormatting(mode: string): Promise<number>;
    runCommand(id?: string, ...args: any[]): Promise<void>;
    doCodeAction(mode: string | null, only?: CodeActionKind[]): Promise<void>;
    /**
     * Get all quickfix actions of current buffer
     *
     * @public
     * @returns {Promise<CodeAction[]>}
     */
    getQuickfixActions(range?: Range): Promise<CodeAction[]>;
    doQuickfix(): Promise<void>;
    applyCodeAction(action: CodeAction): Promise<void>;
    doCodeLensAction(): Promise<void>;
    fold(kind?: string): Promise<void>;
    pickColor(): Promise<void>;
    pickPresentation(): Promise<void>;
    private highlightDocument;
    highlight(): Promise<void>;
    links(): Promise<DocumentLink[]>;
    openLink(): Promise<boolean>;
    private validWorkspaceSymbol;
    getCommands(): Promise<CommandItem[]>;
    private onCharacterType;
    showSignatureHelp(): Promise<void>;
    handleLocations(definition: Definition | LocationLink[], openCommand?: string): Promise<void>;
    private getSelectedRange;
    private previewHover;
    private clearHighlight;
    private getPreferences;
    private getPreviousCharacter;
    dispose(): void;
}
export {};
