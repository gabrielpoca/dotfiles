import { Neovim } from '@chemzqm/neovim';
import { Disposable, Location } from 'vscode-languageserver-protocol';
import { ProviderResult } from '../provider';
import { IList, ListAction, ListContext, ListItem, ListTask } from '../types';
interface ActionOptions {
    persist?: boolean;
    reload?: boolean;
    parallel?: boolean;
}
export default abstract class BasicList implements IList, Disposable {
    protected nvim: Neovim;
    abstract name: string;
    defaultAction: string;
    readonly actions: ListAction[];
    protected previewHeight: number;
    protected disposables: Disposable[];
    private hlGroup;
    constructor(nvim: Neovim);
    protected addAction(name: string, fn: (item: ListItem, context: ListContext) => ProviderResult<void>, options?: ActionOptions): void;
    addLocationActions(): void;
    jumpTo(location: Location, command?: string): Promise<void>;
    private createAction;
    protected previewLocation(location: Location, context: ListContext): Promise<void>;
    abstract loadItems(context: ListContext): Promise<ListItem[] | ListTask | null | undefined>;
    doHighlight(): void;
    dispose(): void;
}
export {};
